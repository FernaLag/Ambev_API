services:
  ambev.ominia.api:
    container_name: ambev_ominia_api
    image: ambev_ominia_api
    build:
      context: .
      dockerfile: src/Ambev.Ominia.Api/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: ${ASPNETCORE_URLS}
      DOTNET_RUNNING_IN_CONTAINER: ${DOTNET_RUNNING_IN_CONTAINER}
      ConnectionStrings__PostgreeConnection: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      MongoDbConfig__ConnectionString: "mongodb://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}"
      MongoDbConfig__Database: "${MONGO_DATABASE}"
      MongoDbConfig__Collection: "${MONGO_COLLECTION}"
      Rebus__UseInMemoryBus: "${USE_IN_MEMORY_BUS}"
      Rebus__RabbitMq__ConnectionString: "amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:${RABBITMQ_PORT}"
      RunMigrations: "${RUN_MIGRATIONS}"
      RunDataSeed: "${RUN_DATA_SEED}"
    ports:
      - "8080:8080"
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend_network

  postgres:
    container_name: ambev_ominia_postgres
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "5432:5432"
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      retries: 5
      start_period: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend_network

  mongodb:
    container_name: ambev_ominia_mongodb
    image: mongo:8.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "27017:27017"
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "echo 'db.runCommand(\"ping\").ok' | mongosh --quiet"]
      interval: 10s
      retries: 5
      start_period: 10s
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend_network

  rabbitmq:
    container_name: ambev_ominia_rabbitmq
    image: rabbitmq:3.13-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      retries: 5
      start_period: 10s
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend_network

networks:
  backend_network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  rabbitmq_data: